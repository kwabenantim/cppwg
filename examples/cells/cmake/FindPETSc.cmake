# - Try to find PETSc
# Once done this will define
#
#  PETSC_FOUND     - system has PETSc
#  PETSC_INCLUDES  - the PETSc include directories
#  PETSC_LIBRARIES - link these to use PETSc
#  PETSC_VERSION   - version string (MAJOR.MINOR.SUBMINOR)
#
# Setting these changes the behavior of the search
#  PETSC_DIR  - directory in which PETSc resides
#  PETSC_ARCH - build architecture
#
# Usage: find_package(PETSc)
#
#=============================================================================
# This file is based on https://github.com/jedbrown/cmake-modules.git
# (BSD 2-clause License)
#
# Copyright the authors
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#=============================================================================

# Set PETSC_DIR
# Ubuntu uses versioned paths e.g /usr/lib/petscdir/petsc3.15/x86_64-linux-gnu-real
file(GLOB ubuntu_paths "/usr/lib/petscdir/*")

find_path(
    PETSC_DIR
    include/petsc.h
    HINTS ENV PETSC_DIR
    PATHS /usr/lib/petsc ${ubuntu_paths}
    DOC "PETSc Directory"
)

# Set PETSC_ARCH
if(PETSC_DIR AND NOT PETSC_ARCH)
    foreach(_arch $ENV{PETSC_ARCH} x86_64-linux-gnu-real x86_64-linux-gnu-real-debug)
        find_path(
            petscconf
            petscconf.h
            HINTS ${PETSC_DIR}
            PATH_SUFFIXES ${_arch}/include
            NO_DEFAULT_PATH
        )
        if(petscconf)
            set(PETSC_ARCH "${_arch}" CACHE STRING "PETSc build architecture")
            break()
        endif()
    endforeach()
endif()

# Check for PETSc config files
if(EXISTS "${PETSC_DIR}/include/petscversion.h" AND
   EXISTS "${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/rules" AND
   EXISTS "${PETSC_DIR}/${PETSC_ARCH}/lib/petsc/conf/petscvariables")
    set(petsc_version_h "${PETSC_DIR}/include/petscversion.h")
    set(petsc_conf_rules "${PETSC_DIR}/lib/petsc/conf/rules")
    set(petsc_conf_variables "${PETSC_DIR}/lib/petsc/conf/variables")
else()
    message(SEND_ERROR "The pair PETSC_DIR=${PETSC_DIR} PETSC_ARCH=${PETSC_ARCH} do not specify a valid PETSc installation")
endif()

# Get the PETSc version
file(STRINGS "${petsc_version_h}" _vstrings REGEX "#define PETSC_VERSION_(RELEASE|MAJOR|MINOR|SUBMINOR|PATCH) ")
foreach(_line ${_vstrings})
    string(REGEX REPLACE " +" ";" _fields ${_line}) # break line into three fields (the first is always "#define")
    list(GET _fields 1 _var)
    list(GET _fields 2 _val)
    set(${_var} ${_val})
endforeach()

set(_version "${PETSC_VERSION_MAJOR}.${PETSC_VERSION_MINOR}.${PETSC_VERSION_SUBMINOR}")

if(PETSC_VERSION_RELEASE)
    if($(PETSC_VERSION_PATCH) GREATER 0)
        set(_version "${_version}p${PETSC_VERSION_PATCH}")
    endif()
else()
    # make dev version compare higher than any patch level of a released version
    set(_version "${_version}.99")
endif()
set(PETSC_VERSION "${_version}" CACHE INTERNAL "PETSc version")

# A temporary makefile to probe the PETSc configuration
set(ENV{PETSC_DIR} "${PETSC_DIR}")
set(ENV{PETSC_ARCH} "${PETSC_ARCH}")
set(petsc_config_makefile "${PROJECT_BINARY_DIR}/Makefile.petsc")
file(WRITE "${petsc_config_makefile}"
"## This file was autogenerated by FindPETSc.cmake
# PETSC_DIR  = ${PETSC_DIR}
# PETSC_ARCH = ${PETSC_ARCH}
include ${petsc_conf_rules}
include ${petsc_conf_variables}
show :
\t-@echo -n \${\${VARIABLE}}
")

find_program(MAKE_EXECUTABLE NAMES make gmake)

macro(PETSC_GET_VARIABLE name var)
    set(${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
    execute_process(
        COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${petsc_config_makefile} show VARIABLE=${name}
        OUTPUT_VARIABLE ${var}
    )
endmacro()

# Extract include paths from compile command line
petsc_get_variable(PETSC_CCPPFLAGS petsc_ccpp_flags)

string(REGEX MATCHALL "-I([^\" ]+|\"[^\"]+\")" _all_tokens "${petsc_ccpp_flags}")
    set(_incs_found "")
    foreach(_token ${_all_tokens})
        string(REGEX REPLACE "^-I" "" _token ${_token})
        string(REGEX REPLACE "//" "/" _token ${_token})
        if(EXISTS ${_token})
            list(APPEND _incs_found ${_token})
        else()
            message(STATUS "Include directory ${_token} does not exist")
        endif()
    endforeach()
    list(REMOVE_DUPLICATES _incs_found)
set(PETSC_INCLUDES_ALL "${_incs_found}")

# Find PETSc libraries
petsc_get_variable(PETSC_LIB_DIR petsc_lib_dir)
message(STATUS "petsc_lib_dir ${petsc_lib_dir}")

macro(PETSC_FIND_LIBRARY suffix name)
    set(PETSC_LIBRARY_${suffix} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE) # Clear any stale value, if we got here, we need to find it again
    find_library(PETSC_LIBRARY_${suffix} NAMES ${name} HINTS ${petsc_lib_dir} NO_DEFAULT_PATH)
    set(PETSC_LIBRARIES_${suffix} "${PETSC_LIBRARY_${suffix}}")
    mark_as_advanced(PETSC_LIBRARY_${suffix})
endmacro()

# Look for petscvec first, if it doesn't exist, we must be using single-library
petsc_find_library(VEC petscvec)
if(PETSC_LIBRARY_VEC)
    petsc_find_library(SYS petscsys)
    petsc_find_library(MAT petscmat)
    petsc_find_library(DM petscdm)
    petsc_find_library(KSP petscksp)
    petsc_find_library(SNES petscsnes)
    petsc_find_library(TS petscts)
    set(PETSC_LIBRARIES_ALL
        ${PETSC_LIBRARY_SYS}
        ${PETSC_LIBRARY_VEC}
        ${PETSC_LIBRARY_MAT}
        ${PETSC_LIBRARY_DM}
        ${PETSC_LIBRARY_KSP}
        ${PETSC_LIBRARY_SNES}
        ${PETSC_LIBRARY_TS}
    )
else()
    set(PETSC_LIBRARY_VEC "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
    petsc_find_library(SINGLE petsc)
    # Ubuntu uses _real and _complex extensions
    if(NOT PETSC_LIBRARY_SINGLE)
        petsc_find_library(SINGLE petsc_real)
    endif()
    if(NOT PETSC_LIBRARY_SINGLE)
        petsc_find_library(SINGLE petsc_complex)
    endif()
    set(PETSC_LIBRARIES_ALL "${PETSC_LIBRARY_SINGLE}")
endif()

if(PETSC_LIBRARY_TS)
    message(STATUS "Recognized PETSc install with separate libraries for each package")
else()
    message(STATUS "Recognized PETSc install with single library for all packages")
endif()

# We do an out-of-source build so __FILE__ will be an absolute path, hence __INSDIR__ is superfluous
set(PETSC_DEFINITIONS "-D__INSDIR__=" CACHE STRING "PETSc definitions" FORCE)

set(PETSC_INCLUDES ${PETSC_INCLUDES_ALL} CACHE STRING "PETSc include path" FORCE)
set(PETSC_LIBRARIES ${PETSC_LIBRARIES_ALL} CACHE STRING "PETSc libraries" FORCE)

# Sometimes this can be used to assist FindMPI.cmake
petsc_get_variable(PCC petsc_cc)
petsc_get_variable(MPIEXEC petsc_mpiexec)
set(PETSC_COMPILER ${petsc_cc} CACHE FILEPATH "PETSc compiler" FORCE)
set(PETSC_MPIEXEC ${petsc_mpiexec} CACHE FILEPATH "Executable for running PETSc MPI programs" FORCE)

# Note that we have forced values for all these choices. If you
# change these, you are telling the system to trust you that they
# work. It is likely that you will end up with a broken build.
mark_as_advanced(PETSC_INCLUDES PETSC_LIBRARIES PETSC_COMPILER PETSC_DEFINITIONS PETSC_MPIEXEC)

file(REMOVE ${petsc_config_makefile})

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
    PETSc
    REQUIRED_VARS PETSC_INCLUDES PETSC_LIBRARIES
    VERSION_VAR PETSC_VERSION
    FAIL_MESSAGE "PETSc could not be found. Be sure to set PETSC_DIR and PETSC_ARCH."
)
