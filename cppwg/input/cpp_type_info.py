"""C++ type information structure."""

from typing import Any, Dict, List, Optional

from pygccxml.declarations import declaration_t

from cppwg.input.base_info import BaseInfo


class CppTypeInfo(BaseInfo):
    """
    An information structure for C++ types including classes, free functions etc.

    Attributes
    ----------
    module_info : ModuleInfo
        The module info parent object associated with this type
    source_file : str
        The source file containing the type
    source_file_full_path : str
        The full path to the source file containing the type
    name_override : str
        The name override specified in config e.g. "CustomFoo" -> "Foo"
    template_arg_lists : List[List[Any]]
        List of template replacement arguments for the type e.g. [[2, 2], [3, 3]]
    decl : declaration_t
        The pygccxml declaration associated with this type
    """

    def __init__(self, name: str, type_config: Optional[Dict[str, Any]] = None):

        super(CppTypeInfo, self).__init__(name)

        self.module_info: Optional["ModuleInfo"] = None  # noqa: F821
        self.source_file_full_path: Optional[str] = None
        self.source_file: Optional[str] = None
        self.name_override: Optional[str] = None
        self.template_arg_lists: Optional[list[List[Any]]] = None
        self.decl: Optional[declaration_t] = None

        if type_config:
            for key, value in type_config.items():
                setattr(self, key, value)

    # TODO: This method is not used, remove it?
    def needs_header_file_instantiation(self):
        """Check if this class needs to be instantiated in the header file."""
        return (
            (self.template_arg_lists is not None)
            and (not self.include_file_only)
            and (self.needs_instantiation)
        )

    # TODO: This method is not used, remove it?
    def needs_header_file_typdef(self):
        """
        Check if this type need to be typdef'd with a nicer name.

        The typedefs are declared in the header file. All template classes need this.
        """
        return (self.template_arg_lists is not None) and (not self.include_file_only)

    # TODO: This method is not used, remove it?
    def needs_auto_wrapper_generation(self):
        """Check if this class needs a wrapper to be autogenerated."""
        return not self.include_file_only
